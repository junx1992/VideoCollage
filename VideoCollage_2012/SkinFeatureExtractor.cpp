#include "Stdafx.h"
#include "SkinFeatureExtractor.h"
#include "Skin\segment\segment-image.h"
#undef FEATURE_DIM
namespace ImageAnalysis
{
	const char foldername[] = "Resource\\";
	//double CSkinFeatureExtractor::g_Histogram_Skin[g_histogram_num][SIZEH][SIZES];
	//double CSkinFeatureExtractor::g_Histogram_NonSkin[SIZEH][SIZES];

	CSkinFeatureExtractor::CSkinFeatureExtractor() : LevelNum(256), UnitNum(0.00001), pAdultScore(NULL), isEnableSegment(ENABLE_SEGMENT)
	{
		m_bEnableROIDetection = false;
		m_bEnableFaceDetection = false;
		init_histograms(foldername, histnum);
	}
	CSkinFeatureExtractor::~CSkinFeatureExtractor()
	{
		bool bsegment = false;
		// save_statistics(string("allimages"), clusternum, bsegment);
	}

	CDoubleFeature CSkinFeatureExtractor::Extract(const IRgbImage &img, const int id) const
	{
		// entrance
		CDoubleFeature feature(id, FEATURE_DIM, 0);
		Extract(feature, img);
		return feature;
	}
	void CSkinFeatureExtractor::Extract(CDoubleFeature &feature, const IRgbImage &img) const
	{   
		// helper
		CRgbImage output;
		feature[1] = feature.Id();
		feature[0] = detect_image_pixel(img, output, feature[1], feature[2]);
	}
	double CSkinFeatureExtractor::Extract(const IRgbImage &img, CRgbImage &output)
	{
		// a stand alone extractor
		double faceArea, nFaces;
		return detect_image_pixel(img, output, faceArea, nFaces);
		//return outimage;
	}
	const int CSkinFeatureExtractor::FeatureDim() const
	{
		return FEATURE_DIM;
	}
	double CSkinFeatureExtractor::detect_image_pixel(const IRgbImage &img, CRgbImage &skinimage, double &nFaceArea, double &mainFaceArea) const
	{
		// the core codes
		// 1. face
		//CRgbImage *image = (CRgbImage*)&img;
		//image->Save(L"temp.jpg");
		CRgbImage image;
		image.Copy(img);
		CDoubleFeature face;
		try {
			face = m_faceFeatureExtractor.Extract(image);
		} catch (exception e) {
			face = CDoubleFeature(0, 7);
		}
		double n = face[0];
		nFaceArea = n + face[1];
		mainFaceArea = face[2];
		if (n <= 0) {
			face[3] = -1;
			face[4] = img.Height();
			face[5] = -1;
			face[6] = img.Width();
		}
		//m_faceFeatureExtractor.Extract(face, img);
		//int histogramnum = clusternum;//positiveclusternum;
		// 2. segment
		Segments segments;
		if (isEnableSegment)
			segment(img, segments);
		// 3. skin
		skinimage = SkinDetector(img);
		return AdultScore(skinimage, face, segments);
	}
	int CSkinFeatureExtractor::segment(const IRgbImage &input, Segments &output) const
	{
		return segment_image(&input, output, 0.5, 1000, 100);
	}
	double CSkinFeatureExtractor::AdultScore(const IRgbImage &softMap, const CDoubleFeature &face, const Segments &segments) const
	{
		int iFaceDim = face.Size();
		double iFaceNum = face[0], iFaceArea = face[1], iFaceRatio = face[2];
		double iFaceBottom = face[3], iFaceTop = face[4], iFaceRight = face[5], iFaceLeft = face[6];
		int width = softMap.Width(), height = softMap.Height();
		int iSkinArea = 0;
		CRgbImage *img = (CRgbImage*)&softMap;
		if (segments.n > 3) {
			int *area_all = new int[segments.n];
			int *area_skin= new int[segments.n];
			int *area_skin_face = new int[segments.n];
			memset(area_all, 0, segments.n * sizeof(int));
			memset(area_skin, 0, segments.n * sizeof(int));
			memset(area_skin_face, 0, segments.n * sizeof(int));
			for (int y = 0; y < height; ++y) {
				for (int x = 0; x < width; ++x) {
					int label = segments.label[y * width + x];
					++(area_all[label]);
					if ((*img)(x, y).r >= SKIN_THRESHOLD)
					{
						++(area_skin[label]);
						if (!(y > iFaceBottom || x < iFaceLeft || x > iFaceRight || y < iFaceTop))
							++(area_skin_face[label]);
					}
				}
			}
			for (int i = 0; i < segments.n; ++i) {
				if ((area_skin[i] << 1) > area_all[i]) {
					iSkinArea += area_skin[i] - area_skin_face[i];
				}
			}
			delete []area_skin_face;
			delete []area_skin;
			delete []area_all;
		} else {
			for (int y = 0; y < height; ++y) {
				for (int x = 0; x < width; ++x) {
					if (y > iFaceBottom || x < iFaceLeft || x > iFaceRight || y < iFaceTop)
						iSkinArea += (*img)(x, y).r >= SKIN_THRESHOLD ? 1 : 0;
				}
			}
		}
		return double(iSkinArea) / (width * height);
	}
	void CSkinFeatureExtractor::SkinAdapter(const DOUBLE **ppLikelihoodOnSkin, const DOUBLE *pLikelihoodOffSkin, CRgbImage &SoftMap, int &iSkinType) const
	{
		double *pSkinTypeProb = new double[clusternum];
		memset(pSkinTypeProb, 0, sizeof(double) * clusternum);

		int width = SoftMap.Width();
		int height = SoftMap.Height();

		// compute the probability belonging to each skin type
		for (int i = 0; i < clusternum; ++i)
		{
			for (int j = 0; j < width * height; ++j)
			{
				pSkinTypeProb[i] += ppLikelihoodOnSkin[i][j];
			}
		}

		// find the skin type
		iSkinType = 0;
		double dMaxSkinProb = pSkinTypeProb[iSkinType];
		for (int i = 1; i < clusternum; ++i)
		{
			if (dMaxSkinProb < pSkinTypeProb[i])
			{
				dMaxSkinProb = pSkinTypeProb[i];
				iSkinType = i;
			}
		}

		// build the softmap
		for (int y = 0; y < height; ++y)
		{
			for (int x = 0; x < width; ++x)
			{
				int index = y * width + x;
				double ratio = 
					(ppLikelihoodOnSkin[iSkinType][index]  + 0.00000000001) / (pLikelihoodOffSkin[index] * SA_SKIN_PIXEL_THRESHOLD + 0.00000000001);

				BYTE R = Ratio2Byte(ratio);
				if (R >= SKIN_THRESHOLD) {
					SoftMap.PixelPtr(x, y)[0] = 0;
					SoftMap.PixelPtr(x, y)[1] = 0;
					SoftMap.PixelPtr(x, y)[2] = R;
				} else {
					SoftMap.PixelPtr(x, y)[0] = R;
					SoftMap.PixelPtr(x, y)[1] = R;
					SoftMap.PixelPtr(x, y)[2] = R;
				}
				//SoftMap(x, y).SetA(255);
			}
		}
		delete []pSkinTypeProb;
	}

	CRgbImage CSkinFeatureExtractor::SkinDetector(const IRgbImage &img) const
	{
		CRgbImage *InImage = (CRgbImage*)&img;
		int width = InImage->Width();
		int height = InImage->Height();
		// allcoate memory
		DOUBLE **ppLikelihoodOnSkin = new double*[clusternum];
		DOUBLE *pLikelihoodOffSkin;
		for (int i = 0; i < clusternum; ++i)
		{
			ppLikelihoodOnSkin[i] = new double[width * height];
		}
		pLikelihoodOffSkin = new double[width * height];

		// detect each pixel to obtain likelihood
		for (int y = 0; y < height; ++y)
		{
			for (int x = 0; x < width; ++x)
			{
				const BYTE R = (*InImage)(x, y).r;
				const BYTE G = (*InImage)(x, y).g;
				const BYTE B = (*InImage)(x, y).b;
				//const BYTE A = img(x, y).A();
				DOUBLE *pLikelihoodOnSkin = new double[clusternum];					
				DOUBLE dLikelihoodOffSkin;
				EvaluateLikelihood(R, G, B, pLikelihoodOnSkin, dLikelihoodOffSkin);
				DWORD index = y * width + x;
				for (int i = 0; i < clusternum; ++i)
				{
					ppLikelihoodOnSkin[i][index] = pLikelihoodOnSkin[i];
				}
				pLikelihoodOffSkin[index] = dLikelihoodOffSkin;
				delete []pLikelihoodOnSkin;
			}
		}

		// process
		CRgbImage m_SoftMap;
		//m_SoftMap.Allocate(InImage);
		//m_SoftMap = &InImage.Clone();
		m_SoftMap.Copy(*InImage);
		int iSkinType = 0;
		SkinAdapter((const DOUBLE**)ppLikelihoodOnSkin, pLikelihoodOffSkin, m_SoftMap, iSkinType);
		//m_SoftMap.Save(L"temp.jpg");

		// skin segmentation
		//CRgbImage m_SegmentColorMap;
		//SkinSegmentor(ppLikelihoodOnSkin[iSkinType], pLikelihoodOffSkin, InImage, m_SegmentColorMap);

		// free memory
		for (int i = 0; i < clusternum; ++i)
		{
			delete []ppLikelihoodOnSkin[i];
		}
		delete []ppLikelihoodOnSkin;
		delete []pLikelihoodOffSkin;
/*
		if (m_bEnableFaceDetection)
		{
			// face detection
			CImageRgb rgbImage;
			rgbImage.Copy(InImage);
			FaceDetector(rgbImage);
		}

		if (m_bEnableROIDetection)
		{
			// ROI detection
			int iFocusLeft = 0; 
			int iFocusTop = 0; 
			int iWidth = 0;
			int iHeight = 0;	
			ROIDetector(InImage, iFocusLeft, iFocusTop, iWidth, iHeight);

			// create detection result with ROI and face detection
			CreateROIImage(m_SegmentColorMap, iFocusLeft, iFocusTop, iWidth, iHeight);
		}
*/
		return m_SoftMap;
	}
	double CSkinFeatureExtractor::g_Histogram_Skin[g_histogram_num][SIZEH][SIZES] = {
		0.063730, 0.024236, 0.054285, 0.051949, 0.053856, 0.052680, 0.056353, 0.056471, 0.050487, 0.075092, 0.102183, 0.083777, 0.055294, 0.040787, 0.028268, 0.026581, 0.033116, 0.028842, 0.033057, 0.040720, 0.038311, 0.021112, 0.014308, 0.010599, 0.006449, 0.005480, 0.007689, 0.012530, 0.011115, 0.005335, 0.004448, 0.012552, 
		0.000537, 0.030799, 0.096295, 0.117010, 0.109121, 0.238325, 0.310272, 0.262843, 0.244918, 0.196886, 0.249144, 0.243056, 0.201755, 0.168478, 0.189265, 0.157759, 0.158666, 0.119101, 0.126545, 0.088301, 0.072045, 0.058051, 0.052241, 0.059180, 0.080252, 0.107899, 0.045451, 0.030154, 0.039399, 0.022616, 0.017555, 0.048713, 
		0.000619, 0.035890, 0.053787, 0.142481, 0.321716, 0.338969, 0.390523, 0.351347, 0.339675, 0.379223, 0.465147, 0.627336, 0.853972, 1.000000, 0.996530, 0.751204, 0.676022, 0.598462, 0.547034, 0.432461, 0.292774, 0.247824, 0.208651, 0.198792, 0.193639, 0.140738, 0.103138, 0.056201, 0.030500, 0.015178, 0.021295, 0.051459, 
		0.008196, 0.021397, 0.056815, 0.077623, 0.137726, 0.133831, 0.181295, 0.173751, 0.235907, 0.148183, 0.169571, 0.202680, 0.270201, 0.308807, 0.341004, 0.280768, 0.346353, 0.282002, 0.214883, 0.164538, 0.118991, 0.089918, 0.066753, 0.053277, 0.048389, 0.037411, 0.027951, 0.024324, 0.015719, 0.008925, 0.029202, 0.042235, 
		0.000878, 0.039436, 0.064556, 0.105336, 0.063942, 0.080948, 0.080502, 0.072794, 0.059825, 0.042345, 0.040934, 0.047447, 0.064036, 0.070703, 0.053877, 0.024679, 0.020360, 0.014109, 0.006560, 0.004204, 0.002837, 0.001419, 0.000675, 0.000367, 0.000524, 0.000727, 0.001101, 0.001041, 0.000811, 0.019621, 0.074388, 0.006267, 
		0.020942, 0.019843, 0.018674, 0.014571, 0.012781, 0.006451, 0.007128, 0.005608, 0.006584, 0.006025, 0.005015, 0.003486, 0.002878, 0.001805, 0.001704, 0.001028, 0.000356, 0.000066, 0.000009, 0.000002, 0.000001, 0.000012, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000029, 
		0.000581, 0.057709, 0.020757, 0.008394, 0.001806, 0.001619, 0.001325, 0.001231, 0.000950, 0.000751, 0.001343, 0.002049, 0.000970, 0.000950, 0.000664, 0.000156, 0.000298, 0.000502, 0.000000, 0.000251, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 
		0.000000, 0.015004, 0.005405, 0.002496, 0.002962, 0.002294, 0.001090, 0.000567, 0.000431, 0.000496, 0.001340, 0.000814, 0.000928, 0.000504, 0.000412, 0.000060, 0.000125, 0.000084, 0.000084, 0.000000, 0.000000, 0.000000, 0.000084, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 
		0.001372, 0.004048, 0.002331, 0.000147, 0.000092, 0.000042, 0.000027, 0.000001, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 
		0.002210, 0.009122, 0.001115, 0.000229, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 
		0.000023, 0.005763, 0.001615, 0.000075, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000053, 
		0.000000, 0.002026, 0.001657, 0.000115, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 
		0.000112, 0.002100, 0.000494, 0.000080, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 
		0.004397, 0.000957, 0.001276, 0.000143, 0.000042, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 0.000000, 0.000000, 0.000000, 0.000000, 0.000041, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000183, 
		0.000672, 0.006034, 0.004766, 0.000125, 0.000021, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
		0.000000, 0.000953, 0.001249, 0.000046, 0.000006, 0.000000, 0.000000, 0.000006, 0.000018, 0.000006, 0.000006, 0.000012, 0.000000, 0.000000, 0.000006, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
		0.003870, 0.003757, 0.001527, 0.000365, 0.000023, 0.000018, 0.000006, 0.000018, 0.000006, 0.000006, 0.000006, 0.000000, 0.000006, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 
		0.000083, 0.006923, 0.001697, 0.000215, 0.000000, 0.000006, 0.000006, 0.000006, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 
		0.000350, 0.005543, 0.006217, 0.002004, 0.000994, 0.000025, 0.000000, 0.000006, 0.000000, 0.000006, 0.000000, 0.000000, 0.000012, 0.000023, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000044, 
		0.002325, 0.003834, 0.003963, 0.001182, 0.000235, 0.000011, 0.000006, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000024, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000022, 
		0.000000, 0.004405, 0.009086, 0.000121, 0.000036, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000006, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 0.000000, 0.000000, 0.000000, 0.000033, 
		0.004003, 0.004143, 0.001744, 0.000329, 0.000139, 0.000103, 0.000040, 0.000000, 0.000006, 0.000000, 0.000006, 0.000006, 0.000017, 0.000000, 0.000000, 0.000006, 0.000034, 0.000000, 0.000006, 0.000000, 0.000000, 0.000029, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005, 0.000000, 0.000000, 0.000051, 
		0.000589, 0.010409, 0.001098, 0.000424, 0.000014, 0.000022, 0.000056, 0.000056, 0.000090, 0.000006, 0.000079, 0.000213, 0.000159, 0.000077, 0.000035, 0.000047, 0.000018, 0.000017, 0.000006, 0.000006, 0.000006, 0.000017, 0.000005, 0.000000, 0.000006, 0.000000, 0.000005, 0.000000, 0.000000, 0.000000, 0.000000, 0.000041, 
		0.000353, 0.003480, 0.000911, 0.002097, 0.001999, 0.000431, 0.000191, 0.000000, 0.000034, 0.000150, 0.000705, 0.002920, 0.001588, 0.001054, 0.000571, 0.000220, 0.000120, 0.000030, 0.000012, 0.000018, 0.000034, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000005, 0.000000, 0.000000, 0.000000, 0.000006, 0.000035, 
		0.003646, 0.003695, 0.002496, 0.005102, 0.002759, 0.002833, 0.002212, 0.003795, 0.004043, 0.007506, 0.003804, 0.001249, 0.001189, 0.000682, 0.000495, 0.000232, 0.000233, 0.000066, 0.000071, 0.000005, 0.000018, 0.000022, 0.000012, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000023, 
		0.000037, 0.016189, 0.004649, 0.003858, 0.005791, 0.008952, 0.008597, 0.001755, 0.005678, 0.002864, 0.002438, 0.001932, 0.001124, 0.000560, 0.000391, 0.000262, 0.000223, 0.000115, 0.000067, 0.000042, 0.000061, 0.000018, 0.000006, 0.000018, 0.000012, 0.000000, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000022, 
		0.010793, 0.025937, 0.006017, 0.005905, 0.006138, 0.012820, 0.008073, 0.002580, 0.006666, 0.005753, 0.001491, 0.001516, 0.001096, 0.000556, 0.000281, 0.000203, 0.000147, 0.000141, 0.000169, 0.000193, 0.000067, 0.000006, 0.000024, 0.000012, 0.000000, 0.000012, 0.000000, 0.000000, 0.000000, 0.000006, 0.000000, 0.000012, 
		0.000012, 0.008800, 0.018401, 0.013152, 0.013170, 0.030612, 0.019861, 0.014591, 0.023943, 0.008632, 0.008024, 0.005291, 0.002023, 0.000930, 0.000535, 0.000301, 0.000346, 0.000140, 0.000219, 0.000085, 0.000030, 0.000049, 0.000025, 0.000012, 0.000068, 0.000006, 0.000018, 0.000038, 0.000000, 0.000000, 0.000000, 0.000029, 
		0.017010, 0.011632, 0.011676, 0.026642, 0.022724, 0.043527, 0.049235, 0.018894, 0.009311, 0.006162, 0.011182, 0.013678, 0.008688, 0.006527, 0.003002, 0.001422, 0.000968, 0.000647, 0.000425, 0.000359, 0.000183, 0.000299, 0.000194, 0.000168, 0.000187, 0.000259, 0.000272, 0.000140, 0.000147, 0.000072, 0.000000, 0.000334, 
		0.000275, 0.020505, 0.030407, 0.050184, 0.033579, 0.041042, 0.075736, 0.032592, 0.047298, 0.031179, 0.014401, 0.014044, 0.008384, 0.007720, 0.006136, 0.004602, 0.003061, 0.001904, 0.001178, 0.001524, 0.001860, 0.001830, 0.001802, 0.001162, 0.000518, 0.000681, 0.000474, 0.000517, 0.000502, 0.000164, 0.000168, 0.000479, 
		0.001504, 0.017780, 0.026520, 0.053299, 0.054601, 0.120535, 0.104903, 0.071376, 0.050750, 0.077065, 0.059013, 0.032982, 0.026038, 0.021048, 0.020372, 0.014039, 0.011692, 0.009164, 0.010651, 0.011029, 0.013540, 0.014641, 0.017444, 0.013696, 0.011795, 0.009966, 0.007465, 0.005802, 0.005271, 0.002767, 0.001537, 0.002025, 
		0.000000, 0.000011, 0.004784, 0.020849, 0.021460, 0.033949, 0.027985, 0.038678, 0.038268, 0.084398, 0.058751, 0.046935, 0.039720, 0.035561, 0.016341, 0.013285, 0.017894, 0.017542, 0.015794, 0.011111, 0.011557, 0.010894, 0.008480, 0.005689, 0.004135, 0.002362, 0.001420, 0.000941, 0.001461, 0.001423, 0.002012, 0.002744
	};
	double CSkinFeatureExtractor::g_Histogram_NonSkin[SIZEH][SIZES] = {
		0.190337, 0.000087, 0.000494, 0.000472, 0.000463, 0.000496, 0.000446, 0.000459, 0.000488, 0.000430, 0.000424, 0.000353, 0.000337, 0.000348, 0.000360, 0.000330, 0.000377, 0.000389, 0.000451, 0.000398, 0.000377, 0.000381, 0.000514, 0.000458, 0.000466, 0.000551, 0.000504, 0.000415, 0.000467, 0.000650, 0.000784, 0.001854, 0.000096, 0.001797, 0.002409, 
		0.002249, 0.002308, 0.002024, 0.001886, 0.002404, 0.002270, 0.001983, 0.001597, 0.001567, 0.001428, 0.001339, 0.001170, 0.000948, 0.001089, 0.000931, 0.000913, 0.000985, 0.001109, 0.000989, 0.000871, 0.000757, 0.000754, 0.000698, 0.000613, 0.000529, 0.000513, 0.000556, 0.000947, 0.001152, 0.000171, 0.003761, 0.003971, 0.003757, 0.003805, 0.003565, 
		0.003052, 0.002907, 0.002835, 0.002807, 0.002431, 0.002045, 0.001891, 0.001700, 0.001545, 0.001507, 0.001665, 0.001428, 0.001245, 0.001076, 0.001063, 0.001025, 0.001035, 0.001051, 0.000963, 0.000874, 0.000750, 0.000618, 0.000590, 0.000603, 0.000642, 0.000908, 0.001443, 0.003581, 0.002845, 0.003293, 0.003680, 0.004043, 0.003988, 0.003716, 0.003216, 
		0.002811, 0.002595, 0.002507, 0.002154, 0.001969, 0.001853, 0.001437, 0.001396, 0.001170, 0.001056, 0.000895, 0.000815, 0.000769, 0.000739, 0.000719, 0.000721, 0.000705, 0.000583, 0.000501, 0.000464, 0.000437, 0.000396, 0.000605, 0.000245, 0.004341, 0.003590, 0.003427, 0.003469, 0.003354, 0.003252, 0.002650, 0.002259, 0.002017, 0.002011, 0.001787, 
		0.001482, 0.001256, 0.001063, 0.000895, 0.000896, 0.000746, 0.000738, 0.000628, 0.000553, 0.000482, 0.000476, 0.000587, 0.000497, 0.000553, 0.000490, 0.000476, 0.000571, 0.000525, 0.000534, 0.000734, 0.004711, 0.003705, 0.002176, 0.002321, 0.002150, 0.001835, 0.001946, 0.001925, 0.001922, 0.001775, 0.001501, 0.001394, 0.001440, 0.001259, 0.001173, 
		0.000965, 0.000964, 0.000770, 0.000720, 0.000713, 0.000669, 0.000636, 0.000517, 0.000420, 0.000376, 0.000334, 0.000343, 0.000402, 0.000378, 0.000413, 0.000462, 0.000496, 0.000186, 0.009303, 0.004233, 0.003873, 0.002814, 0.001741, 0.001715, 0.001888, 0.001961, 0.001680, 0.001413, 0.001229, 0.001122, 0.001027, 0.000912, 0.000777, 0.000863, 0.000737, 
		0.000658, 0.000572, 0.000463, 0.000372, 0.000313, 0.000269, 0.000239, 0.000208, 0.000168, 0.000143, 0.000121, 0.000108, 0.000130, 0.000186, 0.000168, 0.001716, 0.001285, 0.001423, 0.001023, 0.001014, 0.001071, 0.001112, 0.001101, 0.001154, 0.001236, 0.001232, 0.001133, 0.001030, 0.000922, 0.000750, 0.000819, 0.000684, 0.000650, 0.000661, 0.000683, 
		0.000691, 0.000681, 0.000726, 0.000680, 0.000578, 0.000481, 0.000437, 0.000375, 0.000283, 0.000211, 0.000185, 0.000437, 0.000954, 0.001034, 0.000899, 0.000880, 0.000941, 0.000833, 0.000846, 0.000857, 0.000828, 0.000874, 0.000763, 0.000778, 0.000749, 0.000639, 0.000532, 0.000575, 0.000525, 0.000516, 0.000485, 0.000429, 0.000356, 0.000307, 0.000253, 
		0.000210, 0.000186, 0.000163, 0.000147, 0.000137, 0.000125, 0.000114, 0.000125, 0.000636, 0.001971, 0.001205, 0.001016, 0.000958, 0.000895, 0.000773, 0.000698, 0.000878, 0.000898, 0.000646, 0.000566, 0.000472, 0.000419, 0.000386, 0.000294, 0.000321, 0.000256, 0.000221, 0.000182, 0.000158, 0.000123, 0.000090, 0.000078, 0.000066, 0.000055, 0.000050, 
		0.000047, 0.000041, 0.000050, 0.000048, 0.000054, 0.000798, 0.001145, 0.001058, 0.000720, 0.000753, 0.000685, 0.000889, 0.000798, 0.000793, 0.000517, 0.000394, 0.000349, 0.000301, 0.000257, 0.000216, 0.000173, 0.000171, 0.000163, 0.000146, 0.000091, 0.000073, 0.000058, 0.000052, 0.000044, 0.000045, 0.000045, 0.000046, 0.000048, 0.000049, 0.000068, 
		0.000129, 0.000445, 0.000000, 0.000960, 0.001209, 0.000798, 0.000698, 0.000590, 0.000640, 0.000570, 0.000451, 0.000389, 0.000295, 0.000312, 0.000305, 0.000377, 0.000421, 0.000287, 0.000340, 0.000222, 0.000146, 0.000130, 0.000115, 0.000095, 0.000121, 0.000104, 0.000072, 0.000049, 0.000042, 0.000041, 0.000043, 0.000048, 0.000054, 0.000096, 0.000262, 
		0.000937, 0.001024, 0.000982, 0.000739, 0.000521, 0.000453, 0.000422, 0.000417, 0.000360, 0.000326, 0.000271, 0.000246, 0.000220, 0.000186, 0.000170, 0.000228, 0.000235, 0.000249, 0.000277, 0.000235, 0.000163, 0.000136, 0.000175, 0.000424, 0.000122, 0.000064, 0.000070, 0.000053, 0.000047, 0.000119, 0.000195, 0.001732, 0.001387, 0.000908, 0.000935, 
		0.000786, 0.000520, 0.000438, 0.000410, 0.000362, 0.000299, 0.000295, 0.000260, 0.000217, 0.000177, 0.000147, 0.000137, 0.000155, 0.000145, 0.000130, 0.000115, 0.000119, 0.000098, 0.000094, 0.000079, 0.000071, 0.000065, 0.000059, 0.000058, 0.000055, 0.000058, 0.000064, 0.000121, 0.000854, 0.005684, 0.002507, 0.001913, 0.001165, 0.000820, 0.000730, 
		0.000610, 0.000516, 0.000472, 0.000367, 0.000274, 0.000230, 0.000215, 0.000170, 0.000125, 0.000124, 0.000112, 0.000106, 0.000082, 0.000076, 0.000059, 0.000059, 0.000056, 0.000059, 0.000055, 0.000055, 0.000059, 0.000066, 0.000076, 0.000089, 0.000125, 0.000000, 0.000720, 0.000825, 0.000916, 0.000816, 0.000791, 0.001445, 0.000717, 0.000567, 0.000534, 
		0.000561, 0.000587, 0.000546, 0.000346, 0.000242, 0.000171, 0.000169, 0.000120, 0.000096, 0.000089, 0.000076, 0.000063, 0.000080, 0.000107, 0.000221, 0.000135, 0.000056, 0.000055, 0.000045, 0.000040, 0.000033, 0.000050, 0.002913, 0.003318, 0.002746, 0.002003, 0.001967, 0.001626, 0.001503, 0.001276, 0.001039, 0.000858, 0.000820, 0.000881, 0.000758, 
		0.000635, 0.000484, 0.000319, 0.000311, 0.000267, 0.000285, 0.000312, 0.000376, 0.000196, 0.000195, 0.000245, 0.000900, 0.000513, 0.000129, 0.000101, 0.000105, 0.000118, 0.000094, 0.000162, 0.000400, 0.003536, 0.002775, 0.002412, 0.002416, 0.002500, 0.002621, 0.002204, 0.001872, 0.001564, 0.001148, 0.001003, 0.000862, 0.000804, 0.000819, 0.000739, 
		0.000893, 0.001221, 0.000767, 0.000710, 0.000676, 0.000538, 0.000462, 0.000407, 0.000427, 0.000349, 0.000284, 0.000295, 0.000326, 0.000390, 0.000612, 0.000921, 0.000652, 0.006102, 0.004496, 0.004052, 0.003986, 0.003608, 0.003707, 0.003280, 0.003205, 0.003071, 0.002854, 0.002471, 0.002260, 0.001911, 0.001605, 0.001388, 0.001589, 0.001639, 0.001612, 
		0.001699, 0.001690, 0.001522, 0.000847, 0.000620, 0.000498, 0.000489, 0.000478, 0.000434, 0.000659, 0.000655, 0.000705, 0.000946, 0.000973, 0.003322, 0.003688, 0.003916, 0.002941, 0.002408, 0.002226, 0.002909, 0.002417, 0.002082, 0.002178, 0.002016, 0.001938, 0.002055, 0.002052, 0.001475, 0.001631, 0.001519, 0.001798, 0.001460, 0.001310, 0.001205, 
		0.001166, 0.000924, 0.000689, 0.001244, 0.000552, 0.000381, 0.000328, 0.000292, 0.000301, 0.000547, 0.000000, 0.002429, 0.002239, 0.002134, 0.001694, 0.001480, 0.001308, 0.001113, 0.001017, 0.000998, 0.001008, 0.000996, 0.000929, 0.000959, 0.000908, 0.000647, 0.000637, 0.000522, 0.000603, 0.000538, 0.000546, 0.000626, 0.000420, 0.000437, 0.000378, 
		0.000264, 0.000276, 0.000416, 0.000346, 0.000432, 0.000318, 0.001455, 0.003446, 0.003988, 0.002812, 0.001814, 0.001347, 0.001130, 0.001054, 0.000760, 0.000579, 0.000531, 0.000525, 0.000469, 0.000448, 0.000428, 0.000408, 0.000496, 0.001062, 0.000292, 0.000233, 0.000293, 0.000251, 0.000303, 0.000242, 0.000152, 0.000124, 0.000122, 0.000150, 0.000152, 
		0.000164, 0.000225, 0.000441, 0.001983, 0.000568, 0.006522, 0.002357, 0.001935, 0.002073, 0.000911, 0.000572, 0.000421, 0.000436, 0.000439, 0.000419, 0.000395, 0.000438, 0.000330, 0.000325, 0.000270, 0.000282, 0.000239, 0.000168, 0.000143, 0.000119, 0.000123, 0.000121, 0.000095, 0.000061, 0.000044, 0.000034, 0.000024, 0.000022, 0.000020, 0.000023, 
		0.000040, 0.000629, 0.001452, 0.001252, 0.001014, 0.000641, 0.000543, 0.000428, 0.000384, 0.000442, 0.000859, 0.001744, 0.000275, 0.000217, 0.000162, 0.000136, 0.000115, 0.000139, 0.000120, 0.000103, 0.000081, 0.000071, 0.000041, 0.000028, 0.000025, 0.000017, 0.000015, 0.000010, 0.000010, 0.000008, 0.000009, 0.000008, 0.000011, 0.001215, 0.001616, 
		0.001084, 0.000735, 0.000528, 0.000411, 0.000333, 0.000303, 0.000266, 0.000285, 0.000235, 0.000180, 0.000135, 0.000121, 0.000112, 0.000118, 0.000121, 0.000076, 0.000067, 0.000059, 0.000048, 0.000036, 0.000033, 0.000024, 0.000024, 0.000024, 0.000018, 0.000017, 0.000014, 0.000012, 0.000008, 0.000018, 0.000067, 0.001557, 0.001146, 0.000789, 0.000507, 
		0.000423, 0.000369, 0.000257, 0.000235, 0.000226, 0.000242, 0.000202, 0.000184, 0.000168, 0.000162, 0.000130, 0.000115, 0.000089, 0.000068, 0.000072, 0.000089, 0.000078, 0.000093, 0.000119, 0.000179, 0.000363, 0.000085, 0.000028, 0.000019, 0.000019, 0.000018, 0.000013, 0.003066, 0.001542, 0.000792, 0.000598, 0.000372, 0.000314, 0.000568, 0.000308, 
		0.000224, 0.000217, 0.000157, 0.000132, 0.000120, 0.000128, 0.000127, 0.000106, 0.000098, 0.000051, 0.000052, 0.000047, 0.000047, 0.000049, 0.000051, 0.000057, 0.000069, 0.000093, 0.000070, 0.000063, 0.000071, 0.000095, 0.000149, 0.000853, 0.000087, 0.001318, 0.001090, 0.000820, 0.000592, 0.000432, 0.000335, 0.000289, 0.000278, 0.000269, 0.000230, 
		0.000184, 0.000151, 0.000126, 0.000118, 0.000102, 0.000104, 0.000084, 0.000062, 0.000081, 0.000071, 0.000065, 0.000072, 0.000070, 0.000071, 0.000079, 0.000069, 0.000049, 0.000033, 0.000028, 0.000018, 0.000020, 0.002067, 0.002149, 0.001168, 0.000937, 0.000681, 0.000578, 0.000541, 0.000410, 0.000420, 0.000423, 0.000371, 0.000362, 0.000342, 0.000332, 
		0.000364, 0.000284, 0.000230, 0.000207, 0.000204, 0.000223, 0.000225, 0.000265, 0.000294, 0.000335, 0.000310, 0.001525, 0.000176, 0.000126, 0.000106, 0.000066, 0.000051, 0.000073, 0.000333, 0.001731, 0.001719, 0.001260, 0.001040, 0.001082, 0.000680, 0.000592, 0.000569, 0.000436, 0.000406, 0.000364, 0.000324, 0.000312, 0.000306, 0.000263, 0.000281, 
		0.000257, 0.000270, 0.000272, 0.000236, 0.000237, 0.000223, 0.000196, 0.000175, 0.000155, 0.000124, 0.000113, 0.000086, 0.000070, 0.000108, 0.000156, 0.000210, 0.003217, 0.001684, 0.001466, 0.001116, 0.000921, 0.000784, 0.000698, 0.000654, 0.000600, 0.000565, 0.000514, 0.000486, 0.000460, 0.000441, 0.000413, 0.000491, 0.000451, 0.000495, 0.000581, 
		0.000618, 0.000594, 0.000587, 0.000678, 0.000756, 0.000927, 0.000591, 0.000484, 0.000501, 0.000511, 0.000467, 0.000401, 0.000856, 0.001287, 0.001227, 0.001054, 0.001022, 0.000705, 0.000618, 0.000529, 0.000527, 0.000465, 0.000407, 0.000414, 0.000367, 0.000348, 0.000370, 0.000344, 0.000426, 0.000417, 0.000461, 0.000449, 0.000483, 0.000517, 0.000719, 
		0.000705, 0.000922, 0.001713, 0.000775, 0.000610, 0.000753, 0.000891, 0.001105, 0.002736
	};
}